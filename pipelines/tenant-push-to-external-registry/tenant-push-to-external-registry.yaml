---
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: push-to-external-registry
  labels:
    app.kubernetes.io/version: "1.2.0"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: release
spec:
  description: >-
    Tekton pipeline to release HACBS Snapshot to Quay
  params:
    - name: release
      type: string
      description: The namespaced name (namespace/name) of the Release custom resource initiating this pipeline execution
    - name: releasePlan
      type: string
      description: The namespaced name (namespace/name) of the releasePlan
    - name: releaseServiceConfig
      type: string
      description: releaseServiceConfig
      default: release-service/release-service-config
    - name: snapshot
      type: string
      description: The namespaced name (namespace/name) of the snapshot
    - name: enterpriseContractPolicy
      type: string
      description: JSON representation of the EnterpriseContractPolicy
      default: '{"description":"Red Hat''s enterprise requirements","sources":[{"name":"Default","policy":["github.com/enterprise-contract/ec-policies//policy/lib","github.com/enterprise-contract/ec-policies//policy/release"],"data":["oci::quay.io/redhat-appstudio-tekton-catalog/data-acceptable-bundles:latest","github.com/release-engineering/rhtap-ec-policy//data"]}],"configuration":{"exclude":["step_image_registries","tasks.required_tasks_found:prefetch-dependencies"],"include":["@slsa3"]},"publicKey":"k8s://openshift-pipelines/public-key"}'
    - name: enterpriseContractPublicKey
      type: string
      description: Public key to use for validation by the enterprise contract
      default: k8s://tekton-pipelines/public-key
    - name: postCleanUp
      type: string
      description: Cleans up workspace after finishing executing the pipeline
      default: "true"
    - name: verify_ec_task_bundle
      type: string
      description: The location of the bundle containing the verify-enterprise-contract task
      default: "quay.io/enterprise-contract/ec-task-bundle:62077017c96466f58162b75789dd18b0e49d43bb@sha256:ba43a492aa6aab9d788cb10e4f9ed383f84def26e8a404ab86d8081eeda8ba2f"
    - name: taskGitUrl
      type: string
      description: The url to the git repo where the release-service-catalog tasks to be used are stored
      default: https://github.com/scoheb/release-service-catalog.git
    - name: taskGitRevision
      type: string
      description: The revision in the taskGitUrl repo to be used
      default: tenant-pipelines
  workspaces:
    - name: release-workspace
  tasks:
    - name: collect-data
      taskRef:
        resolver: "git"
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: tasks/collect-data/collect-data.yaml
      params:
        - name: release
          value: $(params.release)
        - name: releaseplan
          value: $(params.releasePlan)
        - name: releaseplanadmission
          value: ""
        - name: snapshot
          value: $(params.snapshot)
        - name: subdirectory
          value: $(context.pipelineRun.uid)
      workspaces:
        - name: data
          workspace: release-workspace
    - name: apply-mapping
      taskRef:
        resolver: "git"
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: tasks/apply-mapping/apply-mapping.yaml
      params:
        - name: failOnEmptyResult
          value: "true"
        - name: releasePlanAdmissionPath
          value: "$(context.pipelineRun.uid)/release_plan.json"
        - name: snapshotPath
          value: "$(context.pipelineRun.uid)/snapshot_spec.json"
      workspaces:
        - name: config
          workspace: release-workspace
      runAfter:
        - collect-data
    # - name: verify-enterprise-contract
    #   taskRef:
    #     resolver: "bundles"
    #     params:
    #       - name: bundle
    #         value: $(params.verify_ec_task_bundle)
    #       - name: kind
    #         value: task
    #       - name: name
    #         value: verify-enterprise-contract
    #   params:
    #     - name: IMAGES
    #       value: "$(workspaces.data.path)/$(context.pipelineRun.uid)/snapshot_spec.json"
    #     - name: SSL_CERT_DIR
    #       value: /var/run/secrets/kubernetes.io/serviceaccount
    #     - name: POLICY_CONFIGURATION
    #       value: $(params.enterpriseContractPolicy)
    #     - name: STRICT
    #       value: "1"
    #     - name: IGNORE_REKOR
    #       value: "true"
    #     - name: PUBLIC_KEY
    #       value: $(params.enterpriseContractPublicKey)
    #   workspaces:
    #     - name: data
    #       workspace: release-workspace
    #   runAfter:
    #     - apply-mapping

    - name: second-matrix
      runAfter:
        - apply-mapping
      matrix:
        params:
          - name: GOARCH
            value:
              - "linux/amd64"
              - "linux/ppc64le"
              - "linux/s390x"
          - name: version
            value:
              - "go1.17"
              - "go1.18.1"
        include:
          - name: common-package
            params:
              - name: package
                value: "path/to/common/package/"
          - name: s390x-no-race
            params:
              - name: GOARCH
                value: "linux/s390x"
              - name: flags
                value: "-cover -v"

          - name: go117-context
            params:
              - name: version
                value: "go1.17"
              - name: context
                value: "path/to/go117/context"
          - name: non-existent-arch
            params:
              - name: GOARCH
                value: "I-do-not-exist"
      taskSpec:
        params:
          - name: GOARCH
            type: string
          - name: version
            type: string
            default: ""
          - name: package
            type: string
            default: ""
          - name: flags
            type: string
            default: ""
          - name: context
            type: string
            default: ""
        steps:
          - name: lets-test-matrix-2
            image: ubuntu
            script: |
              #!/bin/bash
              echo "GOARCH: $(params.GOARCH)"
              echo "version: $(params.version)"
              echo "package: $(params.package)"
              echo "flags: $(params.flags)"
              echo "context: $(params.context)"
    - name: wait-for-matrix
      runAfter:
        - second-matrix
      taskSpec:
        steps:
          - name: wait
            image: ubuntu
            script: |
              #!/bin/bash
              echo "Matrix finished!"
    - name: push-snapshot
      taskRef:
        resolver: "git"
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: tasks/push-snapshot/push-snapshot.yaml
      params:
        - name: snapshotPath
          value: "$(context.pipelineRun.uid)/snapshot_spec.json"
        - name: dataPath
          value: "$(context.pipelineRun.uid)/data.json"
      workspaces:
        - name: data
          workspace: release-workspace
      runAfter:
        - wait-for-matrix
    # - name: produce-results
    #   taskSpec:
    #     results:
    #       - name: res1
    #         type: string
    #     steps:
    #       - name: hello
    #         image: ubuntu
    #         script: |
    #           #!/bin/bash
    #           echo -n "Testing" > $(results.res1.path)

    # - name: first-matrix
    #   matrix:
    #     params:
    #       - name: platform
    #         value: ["linux", "windows", "macos"]
    #       - name: browser
    #         value: ["chrome", "firefox"]
    #       - name: node-version
    #         value: ["16.0", "21.0"]
    #   params:
    #     - name: res1
    #       value: $(tasks.produce-results.results.res1)
    #   taskSpec:
    #     params:
    #       - name: res1
    #         type: string
    #       - name: platform
    #         type: string
    #       - name: browser
    #         type: string
    #       - name: node-version
    #         type: string
    #     steps:
    #       - name: lets-test-a-matrix
    #         image: ubuntu
    #         script: |
    #           #!/bin/bash
    #           echo "This one came as a result from 'produce-results' task: $(params.res1)"
    #           echo "Platform: $(params.platform)"
    #           echo "Browser: $(params.browser)"
    #           echo "Node Version: $(params.node-version)"
    # - name: second-matrix
    #   runAfter:
    #     - collect-data
    #   matrix:
    #     params:
    #       - name: GOARCH
    #         value:
    #           - "linux/amd64"
    #           - "linux/ppc64le"
    #           - "linux/s390x"
    #       - name: version
    #         value:
    #           - "go1.17"
    #           - "go1.18.1"
    #     include:
    #       - name: common-package
    #         params:
    #           - name: package
    #             value: "path/to/common/package/"
    #       - name: s390x-no-race
    #         params:
    #           - name: GOARCH
    #             value: "linux/s390x"
    #           - name: flags
    #             value: "-cover -v"

    #       - name: go117-context
    #         params:
    #           - name: version
    #             value: "go1.17"
    #           - name: context
    #             value: "path/to/go117/context"
    #       - name: non-existent-arch
    #         params:
    #           - name: GOARCH
    #             value: "I-do-not-exist"
    #   taskSpec:
    #     params:
    #       - name: GOARCH
    #         type: string
    #       - name: version
    #         type: string
    #         default: ""
    #       - name: package
    #         type: string
    #         default: ""
    #       - name: flags
    #         type: string
    #         default: ""
    #       - name: context
    #         type: string
    #         default: ""
    #     steps:
    #       - name: lets-test-matrix-2
    #         image: ubuntu
    #         script: |
    #           #!/bin/bash
    #           echo "GOARCH: $(params.GOARCH)"
    #           echo "version: $(params.version)"
    #           echo "package: $(params.package)"
    #           echo "flags: $(params.flags)"
    #           echo "context: $(params.context)"
  finally:
    - name: cleanup
      taskRef:
        resolver: "git"
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: tasks/cleanup-workspace/cleanup-workspace.yaml
      when:
        - input: $(params.postCleanUp)
          operator: in
          values: ["true"]
      params:
        - name: subdirectory
          value: "$(context.pipelineRun.uid)"
      workspaces:
        - name: input
          workspace: release-workspace
